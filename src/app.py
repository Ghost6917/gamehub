from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from .schema import schema
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import os
import importlib
from .gql import get_context
from .router import Router
import importlib.util
from .utils import nav, decode_jwt
from .db import UserModel
from typing import Optional
from fastapi.security import HTTPAuthorizationCredentials
from starlette.exceptions import HTTPException as StarletteHTTPException
from fastapi.openapi.utils import get_openapi
from .config import config

app = FastAPI()
app.include_router(Router(schema, context_getter = get_context), prefix = "/graphql")
app.mount("/static", StaticFiles(directory = "./static"), name = "static")

templates = Jinja2Templates('./templates')

def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title = "GameHub",
        version = config.version,
        description = "Autogenerated documentation for GameHub",
        routes = app.routes,
    )

    app.openapi_schema = openapi_schema
    return app.openapi_schema


app.openapi = custom_openapi

@app.exception_handler(StarletteHTTPException)
async def handle_errors(request: Request, exc: StarletteHTTPException):
    if (
        (request.method == "GET") 
        or 
        (request.headers.get("Accept") == "application/json")
    ):
        status: int = exc.status_code
        token: Optional[str] = request.cookies.get('auth')
        user = None

        if token:
            credentials = HTTPAuthorizationCredentials(
                scheme = "Bearer",
                credentials = token
            )
            decode = decode_jwt(credentials.credentials)
            user = UserModel(username = decode['user_id']).find() if decode else None

        return templates.TemplateResponse(
            'error.html',
            {
                'request': request,
                'error': status,
                'nav': nav(user),
                'message': exc.detail
            }, status_code = status
        )
        
    return JSONResponse({
        "message": exc.detail,
        "status": exc.status_code
    })


for root, dirs, files in os.walk('./src/routers'):
    for file in files:
        if file.endswith('.py'):

            mods = root[2:] \
                .replace('\\', '.') \
                .replace('/', '.')
            lib = importlib.import_module(f'{mods}.{file[:-3]}')

            app.include_router(lib.router, prefix = lib.prefix)
